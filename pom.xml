<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.dukecon</groupId>
    <artifactId>dukecon-feedback</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>dukecon-feedback</name>
    <description>Feedback Service for Dukecon</description>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
        </license>
    </licenses>

    <properties>
        <!-- Common project properties - keep them in the beginning -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <!-- Set this to localhost if you would like to test upload server -->
        <nexus.repository.prot>https</nexus.repository.prot>
        <nexus.repository.host>dev.dukecon.org</nexus.repository.host>
        <nexus.repository.port/>
        <nexus.repository.base>/nexus</nexus.repository.base>

        <!-- Max 30 seconds to wait until docker start finished -->
        <uptime-max>30000</uptime-max>

        <base.generated.docs.dir>${project.build.directory}/generated-docs</base.generated.docs.dir>
        <generated.asciidoc.directory>${base.generated.docs.dir}/asciidoc</generated.asciidoc.directory>
        <asciidoctor.input.directory>${project.basedir}/src/main/asciidoc</asciidoctor.input.directory>

        <!-- Please keep (version) properties in alphabetical order! -->
        <asciidoctor-maven-plugin.version>1.5.3</asciidoctor-maven-plugin.version>
        <asciidoctorj.diagram.version>1.3.1</asciidoctorj.diagram.version>
        <docker-maven-plugin.version>0.24.0</docker-maven-plugin.version>
        <git-commit-id-plugin.version>2.2.4</git-commit-id-plugin.version>
        <junit-jupiter.version>5.1.0</junit-jupiter.version>
        <junit-platform-surefire-provider.version>1.1.0</junit-platform-surefire-provider.version>
        <maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
        <spring-boot.version>2.0.0.RELEASE</spring-boot.version>
        <spring-restdocs.version>2.0.0.RELEASE</spring-restdocs.version>

        <!-- Check automatic versions from time to time! -->
    </properties>

    <scm>
        <url>https://github.com/dukecon/dukecon_feedback.git</url>
        <connection>scm:git:git@github.com:dukecon/dukecon_feedback.git</connection>
    </scm>

    <repositories>
        <repository>
            <id>dukecon</id>
            <url>
                ${nexus.repository.prot}://${nexus.repository.host}${nexus.repository.port}${nexus.repository.base}/content/groups/public/
            </url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <!-- Make the site plugin happy: It needs to find some information about GEMs -->
            <id>gemfire-repository</id>
            <name>Gemfire Repository</name>
            <url>
                ${nexus.repository.prot}://${nexus.repository.host}${nexus.repository.port}${nexus.repository.base}/content/repositories/gemfire-release-proxy/
            </url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>dukecon</id>
            <url>
                http://${nexus.repository.host}${nexus.repository.port}${nexus.repository.base}/content/groups/public/
            </url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <distributionManagement>
        <snapshotRepository>
            <id>dukecon-snapshots</id>
            <name>DukeCon Snapshots</name>
            <url>
                http://${nexus.repository.host}${nexus.repository.port}${nexus.repository.base}/content/repositories/snapshots
            </url>
        </snapshotRepository>
        <repository>
            <id>dukecon-releases</id>
            <name>DukeCon Snapshots</name>
            <url>
                http://${nexus.repository.host}${nexus.repository.port}${nexus.repository.base}/content/repositories/releases
            </url>
        </repository>
        <site>
            <id>dukecon-site</id>
            <name>DukeCon Site</name>
            <url>
                dav:http://${nexus.repository.host}${nexus.repository.port}${nexus.repository.base}/content/repositories/site/${project.groupId}/${project.artifactId}/${project.version}
            </url>
        </site>
    </distributionManagement>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/dukecon/dukecon_feedback/issues</url>
    </issueManagement>

    <dependencyManagement>
        <dependencies>
            <!-- Start with BOMs in the required order (to resolve conflicts) -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Keep managed dependencies in the alphabetical order of groupId + artifactId / don't provide scope! -->
            <dependency>
                <groupId>org.junit.platform</groupId>
                <artifactId>junit-platform-surefire-provider</artifactId>
                <version>${junit-platform-surefire-provider.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>${junit-jupiter.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit-jupiter.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Keep used dependencies in the alphabetical order of groupId + artifactId / set scope here! -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-mockmvc</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <!-- Keep managed plugins in the alphabetical order of groupId + artifactId -->
            <!-- Drop groupIds for Maven default plugins and keep them in the beginning -->
            <plugins>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.junit.platform</groupId>
                            <artifactId>junit-platform-surefire-provider</artifactId>
                            <version>${junit-platform-surefire-provider.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.junit.jupiter</groupId>
                            <artifactId>junit-jupiter-engine</artifactId>
                            <version>${junit-jupiter.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker-maven-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <executions>
                        <execution>
                            <id>spring-boot-build-info</id>
                            <goals>
                                <goal>build-info</goal>
                            </goals>
                            <phase>generate-resources</phase>
                        </execution>
                        <execution>
                            <id>spring-boot-repackage</id>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                            <phase>package</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>${git-commit-id-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>revision</goal>
                            </goals>
                            <phase>generate-resources</phase>
                        </execution>
                    </executions>
                    <configuration>
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!-- Keep used plugins in the alphabetical order of groupId + artifactId if possible
                 - For some plugins ordering does matter: If they are used in the same phase!!! -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>${asciidoctor-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>generate-docs</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html</backend>
                            <doctype>book</doctype>
                            <attributes>
                                <snippets>${project.build.directory}/generated-snippets</snippets>
                            </attributes>
                            <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                            <outputDirectory>${generated.asciidoc.directory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.restdocs</groupId>
                        <artifactId>spring-restdocs-asciidoctor</artifactId>
                        <version>${spring-restdocs.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker</id>
            <build>
                <defaultGoal>docker:build</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <configuration>
                            <imagePullPolicy>always</imagePullPolicy>
                            <images>
                                <image>
                                    <name>dukecon/dukecon-feedback:${project.version}</name>
                                    <build>
                                        <from>openjdk:8-jre-alpine</from>
                                        <maintainer>gerd@aschemann.net</maintainer>
                                        <tags>
                                            <tag>${project.version}</tag>
                                            <tag>latest</tag>
                                        </tags>
                                        <ports>
                                            <port>8080</port>
                                        </ports>
                                        <volumes>
                                            <volume>/var/cache/dukecon</volume>
                                        </volumes>
                                        <env>
                                            <JAVA_DEFAULT_OPTS>-Xms768M -Xmx1536M</JAVA_DEFAULT_OPTS>
                                        </env>
                                        <cmd>
                                            <shell>java -Djava.security.egd=file:/dev/./urandom ${JAVA_DEFAULT_OPTS}
                                                ${JAVA_OPTS} -jar /opt/dukecon/dukecon-feedback.jar ${DUKECON_ARGS}
                                            </shell>
                                        </cmd>
                                        <healthCheck>
                                            <!-- 2 minutes should be sufficient to start up the container -->
                                            <!-- <startPeriod>120s</startPeriod> -->
                                            <!-- Start with an interval of 1 minute and 5 retries until startPeriod is available, cf. https://github.com/fabric8io/docker-maven-plugin/issues/961 -->
                                            <interval>30s</interval>
                                            <timeout>5s</timeout>
                                            <retries>5</retries>
                                            <cmd>wget -q -O /dev/null http://localhost:8080/actuator/health</cmd>
                                        </healthCheck>
                                        <workdir>/opt/dukecon</workdir>
                                        <cleanup>false</cleanup>
                                        <assembly>
                                            <basedir>/opt/dukecon</basedir>
                                            <inline xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                                                    xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
                                                <id>dukecon-feedback</id>
                                                <dependencySets>
                                                    <dependencySet>
                                                        <includes>
                                                            <include>org.dukecon:dukecon-feedback</include>
                                                        </includes>
                                                        <outputDirectory>.</outputDirectory>
                                                        <outputFileNameMapping>dukecon-feedback.jar
                                                        </outputFileNameMapping>
                                                    </dependencySet>
                                                </dependencySets>
                                            </inline>
                                        </assembly>
                                    </build>
                                    <run>
                                        <ports>
                                            <!-- Port mappings: Container internal
                                                port (which must be exposed) will be dynamically mapped and this (random)
                                                port will be assigned to the maven variable ${tomcat.port}. Multiple port
                                                mapping can be specified here -->
                                            <port>dukecon.port:8080</port>
                                        </ports>
                                        <wait>
                                            <!-- The plugin waits until this URL is reachable via HTTP ... -->
                                            <url>http://${docker.host.address}:${dukecon.port}/actuator/health</url>
                                            <time>${uptime-max}</time>
                                        </wait>
                                        <log>
                                            <color>BLUE</color>
                                            <file>docker.log</file>
                                        </log>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                        <!-- Connect this plugin to the maven lifecycle around the
                            integration-test phase. I.e. start the container in pre-integration-test
                            and stop it in post-integration-test. -->
                        <executions>
                            <execution>
                                <id>start</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>build</goal>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
